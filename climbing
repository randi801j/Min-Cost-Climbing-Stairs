var minCostClimbingStairs = function(cost) {
    const n = cost.length; // how many stairs are there
    const dp= new Array(n); // remeber how many spots to save

    dp[0]=cost[0]
    dp[1]=cost [1] // we know that we need to take these two steps

    for (let i=2;i<n;i++){ // loop through starting at the third step
        dp[i]= cost[i]+Math.min(dp[i-1],dp[i-2]);
    }
    return Math.min (dp[n-1],dp[n-2]);
};

// Question
//You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.
You can either start from the step with index 0, or the step with index 1.
Return the minimum cost to reach the top of the floor.
Example 1:

Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.
Example 2:

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.

// What it is it asking:
// Write an algorithm to calculate the least spent to get to the top of the steps

// Approach
//need to know the length
// need a varible to store the cost
// we know that we can either take index 0 or 1
// we know that we need to start at the third step
// fibonacci algo: need to figure out the cost of the steps before it 
